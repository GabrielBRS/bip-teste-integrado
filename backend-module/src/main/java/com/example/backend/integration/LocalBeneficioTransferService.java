// Define o pacote. "integration" (integra√ß√£o) √© um nome comum para "Adaptadores"
// no padr√£o "Ports & Adapters" (Hexagonal). Esta classe √© um adaptador
// que implementa a l√≥gica de transfer√™ncia *localmente*.
package com.example.backend.integration;

// Importa a entidade de dom√≠nio.
import com.example.backend.entity.Beneficio;
// Importa as classes do JPA (Jakarta Persistence API).
import jakarta.persistence.EntityManager;
import jakarta.persistence.LockModeType; // üëà Importante! Para controle de concorr√™ncia.
import jakarta.persistence.PersistenceContext;
// Importa o logging (SLF4J).
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
// Importa a anota√ß√£o de configura√ß√£o condicional do Spring Boot.
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
// Importa a anota√ß√£o de Servi√ßo do Spring.
import org.springframework.stereotype.Service;
// Importa a anota√ß√£o de Transa√ß√£o do Spring.
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.NoSuchElementException; // Exce√ß√£o para item n√£o encontrado.

/**
 * @Service: Marca esta classe como um Bean gerenciado pelo Spring.
 * √â o equivalente Spring ao @Stateless do EJB.
 */
@Service
/**
 * @ConditionalOnProperty: Esta √© uma anota√ß√£o poderosa do Spring Boot.
 * Ela instrui o Spring a *s√≥* criar este Bean (esta implementa√ß√£o)
 * se a condi√ß√£o for atendida.
 *
 * prefix = "ejb.beneficio", name = "enabled", havingValue = "false":
 * O Spring ir√° procurar no 'application.properties' por 'ejb.beneficio.enabled=false'.
 *
 * matchIfMissing = true:
 * Esta √© a parte crucial. Se a propriedade 'ejb.beneficio.enabled'
 * *nem sequer existir* no 'application.properties', a condi√ß√£o tamb√©m ser√° atendida.
 *
 * Resumo: Este Bean 'LocalBeneficioTransferService' ser√° o "padr√£o"
 * (a implementa√ß√£o padr√£o da interface 'BeneficioTransferPort'),
 * a menos que voc√™ *ative explicitamente* a vers√£o EJB no seu
 * arquivo de configura√ß√£o (definindo ejb.beneficio.enabled=true).
 * Isso permite alternar entre uma implementa√ß√£o local e uma remota (EJB)
 * apenas mudando uma linha de configura√ß√£o.
 */
@ConditionalOnProperty(prefix = "ejb.beneficio", name = "enabled", havingValue = "false", matchIfMissing = true)
public class LocalBeneficioTransferService implements BeneficioTransferPort {

    /**
     * @PersistenceContext: Injeta o EntityManager (Gerenciador de Entidades) do JPA.
     * Esta √© a forma padr√£o do Jakarta EE (e suportada pelo Spring) de
     * obter acesso direto ao "motor" do JPA, permitindo controle total
     * sobre opera√ß√µes, incluindo 'find', 'merge', 'persist' e 'flush',
     * e, mais importante, sobre o *travamento* (locking).
     */
    @PersistenceContext
    private EntityManager em;

    // Logger est√°tico padr√£o para esta classe.
    private static final Logger log = LoggerFactory.getLogger(LocalBeneficioTransferService.class);

    /**
     * @Transactional: Esta √© a anota√ß√£o de transa√ß√£o do Spring (equivalente
     * ao @TransactionAttribute(REQUIRED) do EJB).
     * Ela garante que todo o m√©todo 'transfer' seja executado dentro de uma
     * √∫nica transa√ß√£o de banco de dados.
     *
     * Se qualquer exce√ß√£o (ex: IllegalArgumentException, IllegalStateException)
     * for lan√ßada, o Spring automaticamente executar√° um *ROLLBACK*,
     * desfazendo o d√©bito e o cr√©dito, garantindo a Atomicidade (o 'A' do ACID).
     */
    @Transactional
    @Override // Indica que este m√©todo est√° implementando um m√©todo da interface BeneficioTransferPort.
    public void transfer(Long fromId, Long toId, BigDecimal amount) {

        // --- 1. Bloco de Valida√ß√£o (Fail-Fast) ---
        // Verifica as entradas (par√¢metros) antes de tocar no banco de dados.
        // Se a entrada for inv√°lida, falha rapidamente com uma exce√ß√£o.
        if (fromId == null || toId == null) throw new IllegalArgumentException("IDs devem ser fornecidos");
        if (fromId.equals(toId)) throw new IllegalArgumentException("fromId and toId devem ser diferentes");

        // .signum() retorna 0 (para zero), 1 (para positivo) ou -1 (para negativo).
        // A transfer√™ncia s√≥ pode ocorrer com um valor estritamente positivo.
        if (amount == null || amount.signum() <= 0) throw new IllegalArgumentException("O valor deve ser positivo");

        log.debug("Iniciando transfer√™ncia local: from={} to={} amount={}", fromId, toId, amount);

        // --- 2. Busca com Lock Otimista (Controle de Concorr√™ncia) ---

        // Busca a entidade de origem (from).
        // LockModeType.OPTIMISTIC_FORCE_INCREMENT:
        // Esta √© uma estrat√©gia de "Lock Otimista". Ela presume que conflitos
        // de concorr√™ncia s√£o raros, mas se prepara para eles.
        // Para funcionar, a entidade 'Beneficio' precisa de uma coluna de vers√£o
        // (ex: @Version private Long version;).
        // Ao ler ('em.find'), o JPA verifica a vers√£o. Ao final da transa√ß√£o
        // (no 'em.flush' ou 'commit'), ele tentar√° fazer o UPDATE *e*
        // incrementar o n√∫mero da vers√£o, mas *somente se* a vers√£o no banco
        // ainda for a mesma que ele leu.
        // Se outra transa√ß√£o alterou a conta no meio tempo (mudando a vers√£o),
        // esta transa√ß√£o falhar√° com uma 'OptimisticLockException'.
        // Isso previne "race conditions" (condi√ß√µes de corrida), onde duas
        // transfer√™ncias poderiam debitar da mesma conta ao mesmo tempo
        // baseadas em um saldo desatualizado.
        Beneficio from = em.find(Beneficio.class, fromId, LockModeType.OPTIMISTIC_FORCE_INCREMENT);
        // Busca a entidade de destino (to) aplicando o mesmo lock.
        Beneficio to = em.find(Beneficio.class, toId, LockModeType.OPTIMISTIC_FORCE_INCREMENT);

        // --- 3. Bloco de Regras de Neg√≥cio ---
        if (from == null || to == null) {
            throw new NoSuchElementException("Beneficio n√£o encontrado");
        }
        if (Boolean.FALSE.equals(from.getAtivo()) || Boolean.FALSE.equals(to.getAtivo())) {
            throw new IllegalStateException("Ambos os Benef√≠cios devem estar ativos");
        }
        // .compareTo() retorna < 0 se 'from.getValor()' for *menor* que 'amount'.
        if (from.getValor().compareTo(amount) < 0) {
            throw new IllegalStateException("Saldo insuficiente");
        }

        // --- 4. Execu√ß√£o da Transa√ß√£o (D√©bito e Cr√©dito) ---
        // Se todas as valida√ß√µes e regras de neg√≥cio passaram, a opera√ß√£o √© executada.
        from.setValor(from.getValor().subtract(amount)); // Debita da origem
        to.setValor(to.getValor().add(amount));     // Credita no destino

        // em.merge() informa ao JPA para sincronizar estas mudan√ßas com o banco.
        // Dentro de uma @Transactional, as entidades 'from' e 'to' j√° est√£o
        // "gerenciadas" (managed), ent√£o o JPA detectaria as mudan√ßas
        // (dirty checking) e as salvaria no commit de qualquer forma.
        // A chamada 'merge' aqui √© expl√≠cita e inofensiva.
        em.merge(from);
        em.merge(to);

        // em.flush(): For√ßa o JPA a enviar os comandos SQL (os UPDATEs)
        // para o banco de dados *agora*, em vez de esperar o fim do m√©todo
        // (o commit da transa√ß√£o).
        // Isso √© √∫til para capturar erros (como a OptimisticLockException
        // ou viola√ß√µes de constraints do BD) imediatamente, antes de
        // executar qualquer l√≥gica adicional.
        em.flush();

        log.info("Transfer√™ncia local conclu√≠da: from={} to={} amount={}", fromId, toId, amount);
    }
    // --- 5. Commit ---
    // Se o m√©todo terminar sem lan√ßar nenhuma exce√ß√£o, a anota√ß√£o @Transactional
    // instrui o Spring a fazer o *COMMIT* da transa√ß√£o, tornando as
    // mudan√ßas (d√©bito e cr√©dito) permanentes no banco de dados.
}